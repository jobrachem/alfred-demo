<?xml version="1.0" encoding="utf-8"?>
<instr>
    <iExample>
        <!-- Dies ist ein Kommentarfeld, das nicht eingelesen wird, sondern lediglich der Erläuterung von Einträgen dient -->
        Hier kann beliebiger Text eingelesen werden. Leerzeichen und Tabs, sowie Zeilenumbrüche werden dabei mit eingelesen!

        Die hier vergebenen Objektnamen (innerhalb der Komparatorzeichen ober- und unterhalb der Texte) werden von alfred interpretiert und zur Zuordnung genutzt. Sie können daher nicht ohne weiteres verändert werden! Jede Änderung an Objektnamen muss auch in der Experimentalskripten berücksichtigt werden!

        Der Header der XML-Datei sollte unverändert bleiben, außer wenn eine andere Zeichenkodierung genutzt wird! Die Standardkodierung ist utf-8.

        Es besteht die Möglichkeit HTML-Tags in den einzelnen Instruktionen zu verwenden. Soll dies passieren, muss aber ein besonderes Tag um den Instruktionstext herum gesetzt werden, welches wie folgt aussieht:

        <![CDATA[    Hier innerhalb der eckigen Klammern können HTML-Tags benutzt werden, die alfred anschließend auch erkennt   ]]>

        Diese Beispielinstruktion sollte nicht gelöscht werden!
    </iExample>

    <t10>
        <![CDATA[
            <h4>About Alfred</h4>
            This is a demo experiment, providing an overview of Alfred's basic features. Alfred is an open source software package that allows for the creation of extremely versatile web-based surveys and experiments for the social sciences. 

            Alfred's source code is hosted on GitHub (<a href="https://github.com/ctreffe/alfred">https://github.com/ctreffe/alfred</a>) and can be cited with a DOI from Zenodo (<a href="https://zenodo.org/badge/latestdoi/150700371">Alfred on Zenodo</a>).

            If you are publishing research conducted using Alfred, please cite it.

            <h4>About this demo experiment</h4>
            This demo experiment presents Alfred's basic functionality along with the code. As an example, this text is entered into the experiment using a <code>TextElement()</code>. 

            Click on "Show/Hide Code" below to see the source code for a <code>TextElement()</code>.
        ]]>
    </t10>

    <t20>
        <![CDATA[
            Click the "Continue" button below to start the demo experiment.
        ]]>
        
    </t20>

    <t21>
        <![CDATA[
            <h4>Importing elements and other classes</h4>
            Elements like the <code>TextElement()</code>, as well as pages and sections, need to be imported from the Alfred library at the beginning of your script.py. There are two recommended ways of doing this. You can import a full module and give it a shorter name for reference. In this case, you embed an element by prefixing it with the abbreviation that you defined for the module (is this case <code>el</code>).
        ]]>
        
    </t21>

    <t22>
        <![CDATA[
             The second option is to import specific classes from a module individually. In this case, you embed the element directly.
        ]]>
    </t22>

    <t30>
        <![CDATA[
            <h4>Adding Elements to Pages</h4>
            Elements like the <code>TextElement()</code> always need to be added to a <b>page</b>. For web-experiments, the standard page class to use is <code>WebCompositePage()</code>. You add an element to a page with the page's <code>.append()</code> method. 

            Click on "Show/Hide Code" below to see the source code for the current page.
        ]]>
    </t30>

    <t40>
        <![CDATA[
            <h4>Adding Pages to Sections</h4>
            To control, how your participants can move through the pages of your experiment, you should always use <b>sections</b>. There are currently three types of sections:

            <code>Section()</code>: Participants can move freely forward and backward through all pages contained in this section. This also means, that they can even move to the next page without filling out forced-input elements.

            <code>HeadOpenSection()</code>: Participants can move freely forward and backward through all pages contained in this section. They can only move forward to the next page, if they filled out all forced-input elements.

            <code>SegmentedSection()</code>: Participants can only move forward, but not backward inside this section. They can only move forward to the next page, if they filled out all forced-input elements.

            You can add pages to a section using the section's <code>.append()</code> method. You can nest sections as you please.

            Click on "Show/Hide Code" below to see the source code for the first two pages of this demo experiment, which are added to a standard section. For the sake of brevity, we omitted the display elements of the pages in the code chunk.
            
        ]]>
    </t40>

    <t50>
        <![CDATA[
            <h4>Adding Sections to the Experiment</h4>
            After adding your pages to sections, you need to add the sections to your experiment. You can do so by adding them in the <code>experiment.page_controller</code>'s <code>.append()</code> method near the end of your script.py file. If you don't need sectins, you can simply add you pages directly to the experiment.

            Click on "Show/Hide Code" below to see the source code for adding the "main" section from above to the experiment.
            
        ]]>
    </t50>

    <t51>
        <![CDATA[
            <h4>Shared parameters</h4>
            There are some parameters that all elements share:

            <code>instruction</code>: Takes a string input. This parameter contains the text used to intruct participants.

            <code>alignment</code>: Can take the values <i>"left"</i> (default), <i>"right"</i>, and <i>"center"</i>. This parameter is used to control the element's alignment on a page.

            <code>font_size</code>: Can take the values <i>"normal"</i> (default), <i>"big"</i>, and <i>"huge"</i>. This parameter is used to control the element's font size. You can also enter the desired size directly as a number (in pt).

            <code>force_input</code>: Can take the values <i>True</i> and <i>False</i> (default). This parameter controls, whether an element is optional or not. The default is optional.

            <code>default</code>: This parameter can be used to set the default value of an element. For most basic input elements, it is a string, in the other cases we show how it should be used for each element.
            
        ]]>
    </t51>

    <t52>
        <![CDATA[
            <h4>Shared parameters of basic input elements</h4>
            There are some parameters that all basic elements (next page) share:

            <code>prefix</code>: Takes a string input, that will be displayed as a prefix to the element. An example is shown on in the <code>TextEntryElement()</code> (next page).

            <code>suffix</code>: Takes a string input, that will be displayed as a suffix to the element. An example is shown on in the <code>RegEntryElement()</code> (next page).
            
        ]]>
    </t52>    

    <t70><![CDATA[
            <hr><code>RegEntryElement()</code>
            
            These input elements allow you to define a custom regular expression (regex) for the validation of user input. A regex is a special text string for describing a search pattern. If you want to learn more about regex, you can start with this thread on StackOverflow.com: <a href="https://stackoverflow.com/questions/4736/learning-regular-expressions">Link</a>
        ]]>
    </t70>

    <t80><![CDATA[
            <hr><code>NumberEntryElement()</code>

            Note: The NumberEntryElement interprets both a comma (,) and a dot (.) as decimal separators.
        ]]>
    </t80>

    <page_text20><![CDATA[
            Looped pages are handy, if you want to create multiple pages with similar structure but differing content. Below, you can see the code used to create the three looped pages in this demo experiment.
        ]]>

    </page_text20>

    <t160>
        <![CDATA[
        <code>WebAudioElement()</code> is an element for quick and easy incorporation of audio files into an experiment. Next to .mp3, you can also include .wav and .ogg files.
        ]]>
    </t160>



</instr>
