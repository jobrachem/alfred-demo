<!-- <?xml version="1.0" encoding="utf-8"?> -->
<instr>
    <iExample>
        <!-- Dies ist ein Kommentarfeld, das nicht eingelesen wird, sondern lediglich der Erläuterung von Einträgen dient -->
        Hier kann beliebiger Text eingelesen werden. Leerzeichen und Tabs, sowie Zeilenumbrüche werden dabei mit eingelesen!

        Die hier vergebenen Objektnamen (innerhalb der Komparatorzeichen ober- und unterhalb der Texte) werden von alfred interpretiert und zur Zuordnung genutzt. Sie können daher nicht ohne weiteres verändert werden! Jede Änderung an Objektnamen muss auch in der Experimentalskripten berücksichtigt werden!

        Der Header der XML-Datei sollte unverändert bleiben, außer wenn eine andere Zeichenkodierung genutzt wird! Die Standardkodierung ist utf-8.

        Es besteht die Möglichkeit HTML-Tags in den einzelnen Instruktionen zu verwenden. Soll dies passieren, muss aber ein besonderes Tag um den Instruktionstext herum gesetzt werden, welches wie folgt aussieht:

        <![CDATA[    Hier innerhalb der eckigen Klammern können HTML-Tags benutzt werden, die alfred anschließend auch erkennt   ]]>

        Diese Beispielinstruktion sollte nicht gelöscht werden!
    </iExample>

    <c10>
# ... is a placeholder for the text that you see here
# you can use html in a TextElement to format your text
# you should always assign a name to your elements
# alignment="left" and font_size="normal" are the defaults
t10 = TextElement(text="...", name="text10", alignment="left", font_size="normal")
    </c10>

    <c11>
import alfred.element as el
text01 = el.TextElement("...", name="text01")
    </c11>

    <c12>
from alfred.element import TextElement
text01 = TextElement("...", name="text01")
    </c12>

    <c20>
# initialize the page
p20 = WebCompositePage(title="Adding Elements to Pages", 
                       uid="page20")  # The uid allows you to find data from this page
                                      # and use it on other pages. 

p20_t10 = TextElement("...")  # create a TextElement
c20 = CodeElement("...", lang="python")  # create a CodeElement (this is what displays the code that you see here.)

p20.append(t10, c20)  # append elements to page
    </c20>

    <c30>
# --- page 10 --- #
p10 = WebCompositePage(title="Welcome to Alfred!", uid="page10")

# --- page 20 --- #
p20 = WebCompositePage(title="Pages and Sections", uid="page20")

# --- Initialize and fill sections --- #
main = Section()
main.append(p10, p20)        
    </c30>

    <c40>
# Append sections to experiment
# You can also append single pages here
exp.append(main)
    </c40>

    <c50>
textentry10 = TextEntryElement(
    instruction="Please enter some text.",
    name="textentry10",     # name in data set. You should always give names to your input elements.

    prefix="prefix"         # prefix to be displayed righthand of the input area
)
    </c50>

    <c60>
textarea10 = TextAreaElement(
    instruction="Enter some more text.",
    name="textarea10",      # name in data set. You should always give names to your input elements.

    x_size=450,             # horizontal size in pixels
    y_size=150              # vertical size in pixels
)
    </c60>

    <c70>
regentry10 = RegEntryElement(
    instruction="Enter an E-Mail address",
    name="regentry10",           # name in data set. You should always give names to your input elements.
 
    reg_ex=r"[^@]+@[^\.]+\..+",  # regular expression for validation of user input. This is a very basic regex for email addresses.
    match_hint="Message",        # hint to be displayed, if user input doesn't match the regular expression

    suffix="suffix"              # suffix to be displayed righthand of the input area
)
    </c70>

    <c80>
numberentry10 = NumberEntryElement(
    instruction="Enter a number",
    name="numberentry10",           # name in data set. You should always give names to your input elements.

    decimals=3,                     # number of decimals allowed
    min=1.3,                        # minimum allowed value
    max=3.7,                        # maximum allowed value
)
    </c80>

    <c90>
password10 = PasswordElement(
    instruction="Enter a password",
    name="password10",      # name in data set. You should always give names to your input elements.

    password="friend",      # this is the password that needs to be entered
    wrong_password_hint="The password is 'friend'."     # hint to be displayed if a wrong password is entered
)        
    </c90>

    <c100>
singlechoice10 = SingleChoiceElement(
    instruction="Choose something",
    name="singlechoice10",          # name in data set. You should always give names to your input elements.

    item_labels=["Choice 1",        # definition of available choices. Should be a list of strings.
                 "Choice 2",        # each element of the list is a choice
                 "Choice 3"],
    
    table_striped=False,            # if True, the element is displayed with a striped layout

    shuffle=False,                  # default: False. If True, the order of available choices is shuffled
    default=1                       # default input value (integer). The number refers to the position of the choice as defined in the item_labels argument.
)
    </c100>
    

    <c110>
multiplechoice10 = MultipleChoiceElement(
    instruction="Choose something",
    name="multiplechoice10",        # name in data set. You should always give names to your input elements.

    item_labels=["Choice 1",        # definition of available choices. Should be a list of strings.
                 "Choice 2",        # each element of the list is a choice
                 "Choice 3"],

    table_striped=False,            # if True, the element is displayed with a striped layout

    shuffle=False,                  # default: False
    default=["0", "1", "0"]         # default: None. If specified, should be a list of the same length as item_labels.
                                    # A "1" means, the box should be ticked, a "0" means it should not be ticked.
)        
    </c110>

    <c120>
likertelement10 = LikertElement(
    instruction="Choose something",
    name="likertelement10",         # name in data set. You should always give names to your input elements.

    levels=7,                       # number of levels. Default: 7

    item_labels=["Left label", "Right label"],      # labels to the left and right side
    top_scale_labels=[                              # labels to be shown above each level (list with one element per level)
        "1", "2", "3", "4",
        "5", "6", "7"],
    bottom_scale_labels=None,       # labels to be shown below each choice (like top_scale_labels)
    
    transpose=False,                # default: False. If True, the levels are stacked vertically instead of horizontally
    spacing=30,                     # default: 30. How much space (in px) should be between the levels
    
    default=None                    # default input value (integer, indicating the default level)
)
    </c120>

    <c130>
likertmatrix10 = LikertMatrix(
    instruction="Enter something",
    name="likertmatrix10",          # name in data set. You should always give names to your input elements.

    levels=5,                       # number of levels. Default: 7
    items=3,                        # number of items. Default: 4

    item_labels=[                   # labels to the left and right side. Each item is associated with two elements of the list.
        "item 1, left", "item 1, right",
        "item 2, left", "item 2, right",
        "item 3, left", "item 3, right"
    ],
    top_scale_labels=["1", "2", "3", "4", "5"],     # labels to be shown above each level (list with one element per level)
    bottom_scale_labels=None,                       # labels to be shown below each choice (like top_scale_labels)
    
    table_striped=False,            # if True, the element is displayed with a striped layout
    transpose=False,                # if True, items are shown in columns instead of rows
    spacing=30,                     # default: 30. How much space (in px) should be between the levels
    
    shuffle=False,                  # default: False. If True, the order of available choices is shuffled
    default=None                    # default input value (integer, indicating the default level). The same default is used for all items.
)
    </c130>

    <page_code10>
looped_pages = Section()    # Standard section. This will contain all pages created by the loop.
n_pages = 3                 # Number of pages to create

for i in range(n_pages):    # Loop for page creation.
    i += 1                  # Since Python starts counting at 0, we add 1 to get the actual page number

    # The following code defines a single page, using the index i to vary content.
    page = WebCompositePage(title="Looped page {}".format(i), uid="looped_page{}".format(i))
    p_text10 = el.TextElement("This is looped page number {}".format(i))
    p_text20 = el.TextElement(texts["page_text20"])
    p_code10 = el.CodeElement(code["page_code10"], lang="python")
    page.append(p_text10, p_text20, p_code10)

    looped_pages.append(page)   # Add the page to our section at the end of each iteration.
    </page_code10>

    <c140>
i10 = ImageElement(
    path="files/sample_img.jpeg",   # path to image in experiment directory
    url=None,                       # alternative to path: url to image on the internet
    x_size=None,                    # vertical image size (in px). The default (None) leads to automatic sizing.
    y_size=None                     # horizontal image size (in px). The default (None) leads to automatic sizing.
)
    </c140>

    <c150>
a10 = WebAudioElement(
    mp3_path="files/sample_audio.mp3",   # path to audio file in experiment directory
    mp3_url=None,                        # alternative: url to audio file

    controls=True,                       # set to False to turn off the control elements
    autoplay=False,                      # set to True, to make the file play automatically
    loop=False                           # set to True, to make the file play in a loop
)
    </c150>


    <c160>
v10 = WebVideoElement(
    mp4_path="files/sample_audio.mp4",   # path to video file in experiment directory
    mp4_url=None,                        # alternative: url to video file

    controls=True,                       # set to False to turn off the control elements
    autoplay=False,                      # set to True, to make the file play automatically
    loop=False                           # set to True, to make the file play in a loop
)
    </c160>

</instr>
